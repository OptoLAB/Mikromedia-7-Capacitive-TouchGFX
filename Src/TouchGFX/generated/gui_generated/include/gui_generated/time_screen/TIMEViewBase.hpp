/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef TIMEVIEWBASE_HPP
#define TIMEVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/time_screen/TIMEPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/clock/DigitalClock.hpp>
#include <touchgfx/containers/clock/AnalogClock.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/ModalWindow.hpp>
#include <touchgfx/Color.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/containers/scrollers/ScrollWheelWithSelectionStyle.hpp>
#include <gui/containers/wheelElement.hpp>
#include <gui/containers/wheelElementSet.hpp>
#include <gui/containers/wheelElement1.hpp>
#include <gui/containers/wheelElementSet1.hpp>

class TIMEViewBase : public touchgfx::View<TIMEPresenter>
{
public:
    TIMEViewBase();
    virtual ~TIMEViewBase() {}
    virtual void setupScreen();

    virtual void scrollWheelHoursUpdateItem(wheelElement& item, int16_t itemIndex)
    {
        // Override and implement this function in TIME
    }

    virtual void scrollWheelHoursUpdateCenterItem(wheelElementSet& item, int16_t itemIndex)
    {
        // Override and implement this function in TIME
    }

    virtual void scrollWheelMinutesUpdateItem(wheelElement& item, int16_t itemIndex)
    {
        // Override and implement this function in TIME
    }

    virtual void scrollWheelMinutesUpdateCenterItem(wheelElementSet& item, int16_t itemIndex)
    {
        // Override and implement this function in TIME
    }

    virtual void scrollWheelSecondsUpdateItem(wheelElement& item, int16_t itemIndex)
    {
        // Override and implement this function in TIME
    }

    virtual void scrollWheelSecondsUpdateCenterItem(wheelElementSet& item, int16_t itemIndex)
    {
        // Override and implement this function in TIME
    }

    virtual void scrollWheelWeekDaysUpdateItem(wheelElement1& item, int16_t itemIndex)
    {
        // Override and implement this function in TIME
    }

    virtual void scrollWheelWeekDaysUpdateCenterItem(wheelElementSet1& item, int16_t itemIndex)
    {
        // Override and implement this function in TIME
    }

    virtual void scrollWheelYearsUpdateItem(wheelElement1& item, int16_t itemIndex)
    {
        // Override and implement this function in TIME
    }

    virtual void scrollWheelYearsUpdateCenterItem(wheelElementSet1& item, int16_t itemIndex)
    {
        // Override and implement this function in TIME
    }

    virtual void scrollWheelDaysUpdateItem(wheelElement1& item, int16_t itemIndex)
    {
        // Override and implement this function in TIME
    }

    virtual void scrollWheelDaysUpdateCenterItem(wheelElementSet1& item, int16_t itemIndex)
    {
        // Override and implement this function in TIME
    }

    virtual void scrollWheelMonthsUpdateItem(wheelElement1& item, int16_t itemIndex)
    {
        // Override and implement this function in TIME
    }

    virtual void scrollWheelMonthsUpdateCenterItem(wheelElementSet1& item, int16_t itemIndex)
    {
        // Override and implement this function in TIME
    }

    /*
     * Virtual Action Handlers
     */
    virtual void setupTimeMenu()
    {
        // Override and implement this function in TIME
    }

    virtual void setDateTime()
    {
        // Override and implement this function in TIME
    }

    virtual void setupDateMenu()
    {
        // Override and implement this function in TIME
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box box1;
    touchgfx::Image image1;
    touchgfx::ButtonWithIcon buttonClose;
    touchgfx::ButtonWithLabel buttonSetTime;
    touchgfx::ButtonWithLabel buttonSetDate;
    touchgfx::BoxWithBorder boxWithBorder1;
    touchgfx::TextArea textArea1;
    touchgfx::DigitalClock digitalClock;
    touchgfx::AnalogClock analogClock;
    touchgfx::TextAreaWithOneWildcard textAreaWeekDay;
    touchgfx::TextAreaWithOneWildcard textAreaDate;
    touchgfx::ModalWindow modalWindow1;
    touchgfx::ButtonWithIcon buttonCANCEL;
    touchgfx::ButtonWithIcon buttonOK;
    touchgfx::Container containerTime;
    touchgfx::ScrollWheelWithSelectionStyle scrollWheelHours;
    touchgfx::DrawableListItems<wheelElement, 5> scrollWheelHoursListItems;
    touchgfx::DrawableListItems<wheelElementSet, 2> scrollWheelHoursSelectedListItems;

    touchgfx::ScrollWheelWithSelectionStyle scrollWheelMinutes;
    touchgfx::DrawableListItems<wheelElement, 5> scrollWheelMinutesListItems;
    touchgfx::DrawableListItems<wheelElementSet, 2> scrollWheelMinutesSelectedListItems;

    touchgfx::ScrollWheelWithSelectionStyle scrollWheelSeconds;
    touchgfx::DrawableListItems<wheelElement, 5> scrollWheelSecondsListItems;
    touchgfx::DrawableListItems<wheelElementSet, 2> scrollWheelSecondsSelectedListItems;

    touchgfx::TextArea textArea2;
    touchgfx::TextArea textArea3;
    touchgfx::Container containerDate;
    touchgfx::ScrollWheelWithSelectionStyle scrollWheelWeekDays;
    touchgfx::DrawableListItems<wheelElement1, 8> scrollWheelWeekDaysListItems;
    touchgfx::DrawableListItems<wheelElementSet1, 2> scrollWheelWeekDaysSelectedListItems;

    touchgfx::ScrollWheelWithSelectionStyle scrollWheelYears;
    touchgfx::DrawableListItems<wheelElement1, 7> scrollWheelYearsListItems;
    touchgfx::DrawableListItems<wheelElementSet1, 2> scrollWheelYearsSelectedListItems;

    touchgfx::ScrollWheelWithSelectionStyle scrollWheelDays;
    touchgfx::DrawableListItems<wheelElement1, 8> scrollWheelDaysListItems;
    touchgfx::DrawableListItems<wheelElementSet1, 2> scrollWheelDaysSelectedListItems;

    touchgfx::ScrollWheelWithSelectionStyle scrollWheelMonths;
    touchgfx::DrawableListItems<wheelElement1, 8> scrollWheelMonthsListItems;
    touchgfx::DrawableListItems<wheelElementSet1, 2> scrollWheelMonthsSelectedListItems;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREAWEEKDAY_SIZE = 10;
    touchgfx::Unicode::UnicodeChar textAreaWeekDayBuffer[TEXTAREAWEEKDAY_SIZE];
    static const uint16_t TEXTAREADATE_SIZE = 10;
    touchgfx::Unicode::UnicodeChar textAreaDateBuffer[TEXTAREADATE_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<TIMEViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<TIMEViewBase, touchgfx::DrawableListItemsInterface*, int16_t, int16_t> updateItemCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex);

};

#endif // TIMEVIEWBASE_HPP
