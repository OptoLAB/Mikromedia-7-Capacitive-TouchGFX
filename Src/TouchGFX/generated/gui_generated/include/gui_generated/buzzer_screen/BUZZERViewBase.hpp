/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef BUZZERVIEWBASE_HPP
#define BUZZERVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/buzzer_screen/BUZZERPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>

class BUZZERViewBase : public touchgfx::View<BUZZERPresenter>
{
public:
    BUZZERViewBase();
    virtual ~BUZZERViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void startBuzzer()
    {
        // Override and implement this function in BUZZER
    }

    virtual void stopBuzzer()
    {
        // Override and implement this function in BUZZER
    }

    virtual void updateVolume(int value)
    {
        // Override and implement this function in BUZZER
    }

    virtual void updateTone(int value)
    {
        // Override and implement this function in BUZZER
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box box1;
    touchgfx::Image image1;
    touchgfx::ButtonWithIcon buttonClose;
    touchgfx::TextArea textArea1;
    touchgfx::Slider sliderVolume;
    touchgfx::Slider sliderTone;
    touchgfx::ButtonWithIcon buttonStart;
    touchgfx::ButtonWithIcon buttonStop;
    touchgfx::TextArea textArea2;
    touchgfx::TextArea textArea3;
    touchgfx::Container keyboard;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::TouchButtonTrigger > buttonC;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::TouchButtonTrigger > buttonD;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::TouchButtonTrigger > buttonE;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::TouchButtonTrigger > buttonF;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::TouchButtonTrigger > buttonG;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::TouchButtonTrigger > buttonA;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::TouchButtonTrigger > buttonH;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::TouchButtonTrigger > buttonC_;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::TouchButtonTrigger > buttonD_;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::TouchButtonTrigger > buttonF_;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::TouchButtonTrigger > buttonG_;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::TouchButtonTrigger > buttonA_;

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<BUZZERViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<BUZZERViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;
    touchgfx::Callback<BUZZERViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);

};

#endif // BUZZERVIEWBASE_HPP
