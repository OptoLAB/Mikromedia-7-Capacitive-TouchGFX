/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef LIGHTVIEWBASE_HPP
#define LIGHTVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/light_screen/LIGHTPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/containers/progress_indicators/CircleProgress.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565Bitmap.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class LIGHTViewBase : public touchgfx::View<LIGHTPresenter>
{
public:
    LIGHTViewBase();
    virtual ~LIGHTViewBase() {}
    virtual void setupScreen();
    virtual void handleKeyEvent(uint8_t key);

    /*
     * Virtual Action Handlers
     */
    virtual void updateText()
    {
        // Override and implement this function in LIGHT
    }

    virtual void updateGain(int value)
    {
        // Override and implement this function in LIGHT
    }

    virtual void updateIntegration(int value)
    {
        // Override and implement this function in LIGHT
    }

    virtual void updateBacklight(int value)
    {
        // Override and implement this function in LIGHT
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box box1;
    touchgfx::Image image1;
    touchgfx::TextArea textArea1;
    touchgfx::ButtonWithIcon buttonWithIcon1;
    touchgfx::Circle circle1;
    touchgfx::PainterRGB565 circle1Painter;
    touchgfx::TextArea textArea4;
    touchgfx::CircleProgress circleProgressCH1;
    touchgfx::PainterRGB565Bitmap circleProgressCH1Painter;
    touchgfx::Slider sliderGain;
    touchgfx::TextArea textArea3;
    touchgfx::TextArea textArea5;
    touchgfx::Slider sliderIntegration;
    touchgfx::TextArea textArea7;
    touchgfx::TextAreaWithOneWildcard textAreaCH1;
    touchgfx::Circle circle2;
    touchgfx::PainterRGB565 circle2Painter;
    touchgfx::TextArea textArea2;
    touchgfx::TextAreaWithOneWildcard textAreaCH0;
    touchgfx::CircleProgress circleProgressCH0;
    touchgfx::PainterRGB565Bitmap circleProgressCH0Painter;
    touchgfx::Slider sliderBacklight;
    touchgfx::TextArea textArea8;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREACH1_SIZE = 5;
    touchgfx::Unicode::UnicodeChar textAreaCH1Buffer[TEXTAREACH1_SIZE];
    static const uint16_t TEXTAREACH0_SIZE = 5;
    touchgfx::Unicode::UnicodeChar textAreaCH0Buffer[TEXTAREACH0_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<LIGHTViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<LIGHTViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 12000;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];
};

#endif // LIGHTVIEWBASE_HPP
