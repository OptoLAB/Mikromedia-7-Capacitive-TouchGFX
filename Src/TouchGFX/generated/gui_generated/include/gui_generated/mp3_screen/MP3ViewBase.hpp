/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MP3VIEWBASE_HPP
#define MP3VIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/mp3_screen/MP3Presenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/containers/progress_indicators/CircleProgress.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565Bitmap.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/containers/ScrollableContainer.hpp>
#include <touchgfx/containers/ListLayout.hpp>

class MP3ViewBase : public touchgfx::View<MP3Presenter>
{
public:
    MP3ViewBase();
    virtual ~MP3ViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void playSong()
    {
        // Override and implement this function in MP3
    }

    virtual void stopSong()
    {
        // Override and implement this function in MP3
    }

    virtual void nextSong()
    {
        // Override and implement this function in MP3
    }

    virtual void previousSong()
    {
        // Override and implement this function in MP3
    }

    virtual void pauseSong()
    {
        // Override and implement this function in MP3
    }

    virtual void setVolume(int value)
    {
        // Override and implement this function in MP3
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box box1;
    touchgfx::Image image1;
    touchgfx::ButtonWithIcon buttonClose;
    touchgfx::TextArea textArea1;
    touchgfx::Box box4;
    touchgfx::TextAreaWithOneWildcard textArea2;
    touchgfx::Box box3;
    touchgfx::Box box2;
    touchgfx::Circle circle1;
    touchgfx::PainterRGB565 circle1Painter;
    touchgfx::CircleProgress playProgress;
    touchgfx::PainterRGB565Bitmap playProgressPainter;
    touchgfx::ButtonWithIcon buttonPlay;
    touchgfx::ButtonWithIcon buttonStop;
    touchgfx::ButtonWithIcon buttonPause;
    touchgfx::ButtonWithIcon buttonNext;
    touchgfx::ButtonWithIcon buttonPrevious;
    touchgfx::Slider volume;
    touchgfx::TextArea textArea4;
    touchgfx::TextArea textArea5;
    touchgfx::TextAreaWithOneWildcard textArea3;
    touchgfx::ScrollableContainer playlistScroll;
    touchgfx::ListLayout playlist;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREA2_SIZE = 50;
    touchgfx::Unicode::UnicodeChar textArea2Buffer[TEXTAREA2_SIZE];
    static const uint16_t TEXTAREA3_SIZE = 5;
    touchgfx::Unicode::UnicodeChar textArea3Buffer[TEXTAREA3_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<MP3ViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<MP3ViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 12000;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];
};

#endif // MP3VIEWBASE_HPP
