/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/light_screen/LIGHTViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

LIGHTViewBase::LIGHTViewBase() :
    buttonCallback(this, &LIGHTViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &LIGHTViewBase::sliderValueChangedCallbackHandler)
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    box1.setPosition(0, 0, 800, 480);
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(214, 214, 214));

    image1.setXY(0, 0);
    image1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_TOPBAR_TOPBAR_BG_800X480PX_ID));

    textArea1.setXY(111, 69);
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    textArea1.setLinespacing(0);
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID6));

    buttonWithIcon1.setXY(740, 1);
    buttonWithIcon1.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REMOVE_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_REMOVE_32_ID));
    buttonWithIcon1.setIconXY(16, 16);
    buttonWithIcon1.setAction(buttonCallback);

    circle1.setPosition(462, 197, 190, 190);
    circle1.setCenter(95, 95);
    circle1.setRadius(95);
    circle1.setLineWidth(0);
    circle1.setArc(0, 360);
    circle1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    circle1.setPainter(circle1Painter);
    circle1.setAlpha(100);

    textArea4.setXY(513, 345);
    textArea4.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    textArea4.setLinespacing(0);
    textArea4.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));

    circleProgressCH1.setXY(465, 201);
    circleProgressCH1.setProgressIndicatorPosition(0, 0, 184, 94);
    circleProgressCH1.setRange(0, 255);
    circleProgressCH1.setCenter(92, 92);
    circleProgressCH1.setRadius(82);
    circleProgressCH1.setLineWidth(16);
    circleProgressCH1.setStartEndAngle(-90, 90);
    circleProgressCH1.setCapPrecision(180);
    circleProgressCH1.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_LARGE_CIRCLE_INDICATOR_BG_LINE_HALF_ID));
    circleProgressCH1Painter.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_LARGE_CIRCLE_INDICATOR_FILL_LINE_HALF_ID));
    circleProgressCH1.setPainter(circleProgressCH1Painter);
    circleProgressCH1.setValue(60);

    sliderGain.setXY(137, 151);
    sliderGain.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_INDICATORS_SLIDER_HORIZONTAL_SMALL_ROUND_KNOB_ID));
    sliderGain.setupHorizontalSlider(3, 7, 0, 0, 125);
    sliderGain.setValueRange(0, 5);
    sliderGain.setValue(0);
    sliderGain.setNewValueCallback(sliderValueChangedCallback);

    textArea3.setXY(205, 115);
    textArea3.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    textArea3.setLinespacing(0);
    textArea3.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));

    textArea5.setXY(15, 18);
    textArea5.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    textArea5.setLinespacing(0);
    textArea5.setTypedText(touchgfx::TypedText(T_SINGLEUSEID25));

    sliderIntegration.setXY(462, 151);
    sliderIntegration.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_INDICATORS_SLIDER_HORIZONTAL_SMALL_ROUND_KNOB_ID));
    sliderIntegration.setupHorizontalSlider(3, 7, 0, 0, 125);
    sliderIntegration.setValueRange(0, 7);
    sliderIntegration.setValue(0);
    sliderIntegration.setNewValueCallback(sliderValueChangedCallback);

    textArea7.setXY(502, 115);
    textArea7.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    textArea7.setLinespacing(0);
    textArea7.setTypedText(touchgfx::TypedText(T_SINGLEUSEID28));

    textAreaCH1.setPosition(494, 272, 125, 42);
    textAreaCH1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    textAreaCH1.setLinespacing(0);
    Unicode::snprintf(textAreaCH1Buffer, TEXTAREACH1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID492).getText());
    textAreaCH1.setWildcard(textAreaCH1Buffer);
    textAreaCH1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID488));

    circle2.setPosition(131, 197, 190, 190);
    circle2.setCenter(95, 95);
    circle2.setRadius(95);
    circle2.setLineWidth(0);
    circle2.setArc(0, 360);
    circle2Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    circle2.setPainter(circle2Painter);
    circle2.setAlpha(100);

    textArea2.setXY(178, 343);
    textArea2.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    textArea2.setLinespacing(0);
    textArea2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));

    textAreaCH0.setPosition(159, 272, 125, 42);
    textAreaCH0.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    textAreaCH0.setLinespacing(0);
    Unicode::snprintf(textAreaCH0Buffer, TEXTAREACH0_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID491).getText());
    textAreaCH0.setWildcard(textAreaCH0Buffer);
    textAreaCH0.setTypedText(touchgfx::TypedText(T_SINGLEUSEID490));

    circleProgressCH0.setXY(133, 200);
    circleProgressCH0.setProgressIndicatorPosition(0, 0, 184, 94);
    circleProgressCH0.setRange(0, 255);
    circleProgressCH0.setCenter(92, 92);
    circleProgressCH0.setRadius(82);
    circleProgressCH0.setLineWidth(16);
    circleProgressCH0.setStartEndAngle(-90, 90);
    circleProgressCH0.setCapPrecision(180);
    circleProgressCH0.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_LARGE_CIRCLE_INDICATOR_BG_LINE_HALF_ID));
    circleProgressCH0Painter.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_LARGE_CIRCLE_INDICATOR_FILL_LINE_HALF_ID));
    circleProgressCH0.setPainter(circleProgressCH0Painter);
    circleProgressCH0.setValue(60);

    sliderBacklight.setXY(62, 436);
    sliderBacklight.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_LARGE_SLIDER_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_LARGE_SLIDER_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_INDICATORS_SLIDER_HORIZONTAL_SMALL_ROUND_KNOB_ID));
    sliderBacklight.setupHorizontalSlider(2, 10, 0, 0, 622);
    sliderBacklight.setValueRange(0, 255);
    sliderBacklight.setValue(255);
    sliderBacklight.setNewValueCallback(sliderValueChangedCallback);

    textArea8.setXY(337, 403);
    textArea8.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    textArea8.setLinespacing(0);
    textArea8.setTypedText(touchgfx::TypedText(T_SINGLEUSEID493));

    add(box1);
    add(image1);
    add(textArea1);
    add(buttonWithIcon1);
    add(circle1);
    add(textArea4);
    add(circleProgressCH1);
    add(sliderGain);
    add(textArea3);
    add(textArea5);
    add(sliderIntegration);
    add(textArea7);
    add(textAreaCH1);
    add(circle2);
    add(textArea2);
    add(textAreaCH0);
    add(circleProgressCH0);
    add(sliderBacklight);
    add(textArea8);
}

void LIGHTViewBase::setupScreen()
{

}

//Handles when a key is pressed
void LIGHTViewBase::handleKeyEvent(uint8_t key)
{
    if(1 == key)
    {
        //Interaction1
        //When hardware button 1 clicked call virtual function
        //Call updateText
        updateText();
    }
}

void LIGHTViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonWithIcon1)
    {
        //Interaction2
        //When buttonWithIcon1 clicked change screen to MAIN_MENU
        //Go to MAIN_MENU with no screen transition
        application().gotoMAIN_MENUScreenNoTransition();
    }
}

void LIGHTViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &sliderGain)
    {
        //Interaction3
        //When sliderGain value changed call virtual function
        //Call updateGain
        updateGain(value);
    }
    else if (&src == &sliderIntegration)
    {
        //Interaction4
        //When sliderIntegration value changed call virtual function
        //Call updateIntegration
        updateIntegration(value);
    }
    else if (&src == &sliderBacklight)
    {
        //Interaction5
        //When sliderBacklight value changed call virtual function
        //Call updateBacklight
        updateBacklight(value);
    }
}
