/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <new>
#include <gui_generated/common/FrontendApplicationBase.hpp>
#include <gui/common/FrontendHeap.hpp>
#include <touchgfx/transitions/NoTransition.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <platform/driver/lcd/LCD16bpp.hpp>
#include <gui/main_menu_screen/MAIN_MENUView.hpp>
#include <gui/main_menu_screen/MAIN_MENUPresenter.hpp>
#include <gui/rgb_led_screen/RGB_LEDView.hpp>
#include <gui/rgb_led_screen/RGB_LEDPresenter.hpp>
#include <gui/light_screen/LIGHTView.hpp>
#include <gui/light_screen/LIGHTPresenter.hpp>
#include <gui/accel_screen/ACCELView.hpp>
#include <gui/accel_screen/ACCELPresenter.hpp>
#include <gui/gallery_screen/GALLERYView.hpp>
#include <gui/gallery_screen/GALLERYPresenter.hpp>
#include <gui/mp3_screen/MP3View.hpp>
#include <gui/mp3_screen/MP3Presenter.hpp>
#include <gui/temp_screen/TEMPView.hpp>
#include <gui/temp_screen/TEMPPresenter.hpp>
#include <gui/pwr_screen/PWRView.hpp>
#include <gui/pwr_screen/PWRPresenter.hpp>
#include <gui/time_screen/TIMEView.hpp>
#include <gui/time_screen/TIMEPresenter.hpp>
#include <gui/buzzer_screen/BUZZERView.hpp>
#include <gui/buzzer_screen/BUZZERPresenter.hpp>
#include <gui/flash_screen/FLASHView.hpp>
#include <gui/flash_screen/FLASHPresenter.hpp>
#include <gui/nrf_screen/NRFView.hpp>
#include <gui/nrf_screen/NRFPresenter.hpp>
#include <gui/weather_screen/WEATHERView.hpp>
#include <gui/weather_screen/WEATHERPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
    touchgfx::Texts::setLanguage(GB);
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
}

/*
 * Screen Transition Declarations
 */

// MAIN_MENU

void FrontendApplicationBase::gotoMAIN_MENUScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMAIN_MENUScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoMAIN_MENUScreenNoTransitionImpl()
{
    touchgfx::makeTransition<MAIN_MENUView, MAIN_MENUPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

void FrontendApplicationBase::gotoMAIN_MENUScreenSlideTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMAIN_MENUScreenSlideTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoMAIN_MENUScreenSlideTransitionEastImpl()
{
    touchgfx::makeTransition<MAIN_MENUView, MAIN_MENUPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// RGB_LED

void FrontendApplicationBase::gotoRGB_LEDScreenSlideTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoRGB_LEDScreenSlideTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoRGB_LEDScreenSlideTransitionEastImpl()
{
    touchgfx::makeTransition<RGB_LEDView, RGB_LEDPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// LIGHT

void FrontendApplicationBase::gotoLIGHTScreenSlideTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoLIGHTScreenSlideTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoLIGHTScreenSlideTransitionEastImpl()
{
    touchgfx::makeTransition<LIGHTView, LIGHTPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// ACCEL

void FrontendApplicationBase::gotoACCELScreenSlideTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoACCELScreenSlideTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoACCELScreenSlideTransitionEastImpl()
{
    touchgfx::makeTransition<ACCELView, ACCELPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// GALLERY

void FrontendApplicationBase::gotoGALLERYScreenSlideTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoGALLERYScreenSlideTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoGALLERYScreenSlideTransitionEastImpl()
{
    touchgfx::makeTransition<GALLERYView, GALLERYPresenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// MP3

void FrontendApplicationBase::gotoMP3ScreenSlideTransitionEast()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMP3ScreenSlideTransitionEastImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoMP3ScreenSlideTransitionEastImpl()
{
    touchgfx::makeTransition<MP3View, MP3Presenter, touchgfx::SlideTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// TEMP

void FrontendApplicationBase::gotoTEMPScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoTEMPScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoTEMPScreenNoTransitionImpl()
{
    touchgfx::makeTransition<TEMPView, TEMPPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// PWR

void FrontendApplicationBase::gotoPWRScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoPWRScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoPWRScreenNoTransitionImpl()
{
    touchgfx::makeTransition<PWRView, PWRPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// TIME

void FrontendApplicationBase::gotoTIMEScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoTIMEScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoTIMEScreenNoTransitionImpl()
{
    touchgfx::makeTransition<TIMEView, TIMEPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// BUZZER

void FrontendApplicationBase::gotoBUZZERScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoBUZZERScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoBUZZERScreenNoTransitionImpl()
{
    touchgfx::makeTransition<BUZZERView, BUZZERPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// FLASH

void FrontendApplicationBase::gotoFLASHScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoFLASHScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoFLASHScreenNoTransitionImpl()
{
    touchgfx::makeTransition<FLASHView, FLASHPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// NRF

void FrontendApplicationBase::gotoNRFScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoNRFScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoNRFScreenNoTransitionImpl()
{
    touchgfx::makeTransition<NRFView, NRFPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// WEATHER

void FrontendApplicationBase::gotoWEATHERScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoWEATHERScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoWEATHERScreenNoTransitionImpl()
{
    touchgfx::makeTransition<WEATHERView, WEATHERPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
