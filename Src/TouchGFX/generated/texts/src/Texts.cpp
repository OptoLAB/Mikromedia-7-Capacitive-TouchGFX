/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/Texts.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/TypedText.hpp>
#include <texts/TypedTextDatabase.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <touchgfx/TextProvider.hpp>

touchgfx::Font::StringWidthFunctionPointer touchgfx::Font::getStringWidthFunction = &touchgfx::Font::getStringWidthLTR;
touchgfx::LCD::DrawStringFunctionPointer touchgfx::LCD::drawStringFunction = &touchgfx::LCD::drawStringLTR;
touchgfx::TextProvider::UnicodeConverterInitFunctionPointer touchgfx::TextProvider::unicodeConverterInitFunction = static_cast<touchgfx::TextProvider::UnicodeConverterInitFunctionPointer>(0);
touchgfx::TextProvider::UnicodeConverterFunctionPointer touchgfx::TextProvider::unicodeConverterFunction = static_cast<touchgfx::TextProvider::UnicodeConverterFunctionPointer>(0);

//Default typed text database
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE =
{
    0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x20, 0x69, 0x73, 0x20, 0x6f, 0x62, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x6f, 0x70, 0x65, 0x6e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x70, 0x2e, 0x6f, 0x72, 0x67, 0x20, 0x76, 0x69, 0x61, 0x20, 0x41, 0x50, 0x49, 0x20, 0x6b, 0x65, 0x79, 0x0, // @0 "Weather info is obtained from openweathermap.org via API key"
    0x4d, 0x43, 0x50, 0x39, 0x37, 0x30, 0x30, 0x41, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x53, 0x54, 0x4d, 0x33, 0x32, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x74, 0x65, 0x70, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x0, // @61 "MCP9700A external and STM32 internal tepmperature sensors"
    0x4c, 0x54, 0x52, 0x33, 0x32, 0x39, 0x41, 0x4c, 0x53, 0x20, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x54, 0x53, 0x4f, 0x50, 0x36, 0x32, 0x33, 0x38, 0x20, 0x49, 0x52, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x0, // @119 "LTR329ALS ambient light sensor and TSOP6238 IR receiver"
    0x55, 0x73, 0x65, 0x20, 0x49, 0x52, 0x20, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x28, 0x4e, 0x45, 0x43, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x29, 0x0, // @175 "Use IR Remote to change background color (NEC protocol)"
    0x4c, 0x6f, 0x61, 0x64, 0x20, 0x2e, 0x62, 0x69, 0x6e, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x53, 0x44, 0x20, 0x63, 0x61, 0x72, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x6f, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x0, // @231 "Load .bin file from SD card into external flash"
    0x4c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x53, 0x44, 0x20, 0x63, 0x61, 0x72, 0x64, 0x20, 0x28, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x29, 0x0, // @279 "Loading images from SD card (Dynamic images)"
    0x46, 0x58, 0x4f, 0x53, 0x38, 0x37, 0x30, 0x30, 0x43, 0x51, 0x20, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x0, // @324 "FXOS8700CQ Accelerometer and Magnetometer"
    0x44, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x28, 0x4d, 0x43, 0x55, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x52, 0x54, 0x43, 0x29, 0x0, // @366 "Date and time (MCU internal RTC)"
    0x50, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x0, // @399 "Power supply and battery status"
    0x6e, 0x52, 0x46, 0x32, 0x34, 0x4c, 0x30, 0x31, 0x70, 0x20, 0x32, 0x2e, 0x34, 0x47, 0x48, 0x7a, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x0, // @431 "nRF24L01p 2.4GHz Transceiver"
    0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x0, // @460 "Internal temperature sensor"
    0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x0, // @488 "External temperature sensor"
    0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2f, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x0, // @516 "Accelerometer/Magnetometer"
    0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x31, 0x32, 0x56, 0x20, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x0, // @543 "External 12V Power supply"
    0x53, 0x53, 0x54, 0x32, 0x36, 0x56, 0x46, 0x30, 0x36, 0x34, 0x42, 0x20, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x0, // @569 "SST26VF064B Flash loader"
    0x4e, 0x43, 0x50, 0x35, 0x36, 0x32, 0x33, 0x43, 0x20, 0x52, 0x47, 0x42, 0x20, 0x4c, 0x45, 0x44, 0x20, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x0, // @594 "NCP5623C RGB LED Driver"
    0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x20, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x0, // @618 "Battery charging status"
    0x54, 0x3d, 0x20, 0x2, 0x2e, 0x2, 0x20, 0xb0, 0x43, 0x0, // @642 "T= <>.<> ?C"
    0x56, 0x3d, 0x20, 0x2, 0x2e, 0x2, 0x20, 0x56, 0x0, // @652 "V= <>.<> V"
    0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x21, 0x0, // @661 "Transfer completed!"
    0x2, 0x2e, 0x2, 0x20, 0x4b, 0x42, 0x0, // @681 "<>.<> KB"
    0x43, 0x43, 0x33, 0x31, 0x30, 0x30, 0x20, 0x57, 0x69, 0x46, 0x69, 0x20, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x0, // @688 "CC3100 WiFi Module"
    0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x65, 0x73, 0x61, 0x67, 0x65, 0x20, 0x62, 0x6f, 0x78, 0x0, // @707 "This is mesage box"
    0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x28, 0x2, 0x29, 0x0, // @726 "Playlist (<>)"
    0x56, 0x53, 0x31, 0x30, 0x35, 0x33, 0x20, 0x4d, 0x50, 0x33, 0x20, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x0, // @739 "VS1053 MP3 decoder"
    0x42, 0x4d, 0x50, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x20, 0x2, 0x0, // @758 "BMP Info: <>"
    0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x3a, 0x0, // @770 "Current weather:"
    0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x73, 0x6f, 0x6e, 0x67, 0x20, 0x30, 0x0, // @787 "This is song 0"
    0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x2, 0x0, // @802 "Status:<>"
    0x52, 0x46, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x0, // @811 "RF Transceiver"
    0x4c, 0x69, 0x67, 0x68, 0x74, 0x20, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x0, // @826 "Light sensors"
    0x66, 0x69, 0x6c, 0x65, 0x3a, 0x20, 0x2, 0x0, // @840 "file: <>"
    0x43, 0x69, 0x74, 0x79, 0x3a, 0x20, 0x2, 0x0, // @848 "City: <>"
    0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x3f, 0x0, // @856 "Delete flash?"
    0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x0, // @870 "Battery level"
    0x4e, 0x6f, 0x74, 0x20, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x0, // @884 "Not Connected"
    0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x0, // @898 "Accelerometer"
    0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x20, 0x46, 0x75, 0x6c, 0x6c, 0x0, // @912 "Battery Full"
    0x54, 0x65, 0x73, 0x74, 0x20, 0x52, 0x47, 0x42, 0x20, 0x4c, 0x45, 0x44, 0x0, // @925 "Test RGB LED"
    0x41, 0x63, 0x63, 0x65, 0x6c, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x61, 0x72, 0x0, // @938 "Accel filtar"
    0x46, 0x6c, 0x61, 0x73, 0x68, 0x20, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x0, // @951 "Flash Loader"
    0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x2e, 0x2e, 0x0, // @964 "Charging..."
    0x42, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x20, 0x74, 0x65, 0x73, 0x74, 0x0, // @976 "Buzzer test"
    0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0, // @988 "integration"
    0x41, 0x63, 0x63, 0x65, 0x6c, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x0, // @1000 "Accel range"
    0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x0, // @1012 "Temperature"
    0x2, 0x20, 0x25, 0x0, // @1024 "<> %"
    0x48, 0x50, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x61, 0x72, 0x0, // @1028 "HP filtar"
    0x7a, 0x3d, 0x2, 0x0, // @1038 "z=<>"
    0x63, 0x6c, 0x65, 0x61, 0x72, 0x20, 0x73, 0x6b, 0x79, 0x0, // @1042 "clear sky"
    0x79, 0x3d, 0x2, 0x0, // @1052 "y=<>"
    0x78, 0x3d, 0x2, 0x0, // @1056 "x=<>"
    0x42, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x0, // @1060 "Backlight"
    0x4e, 0x65, 0x77, 0x20, 0x54, 0x65, 0x78, 0x74, 0x0, // @1070 "New Text"
    0x53, 0x65, 0x74, 0x20, 0x44, 0x61, 0x74, 0x65, 0x0, // @1079 "Set Date"
    0x53, 0x65, 0x74, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x0, // @1088 "Set Time"
    0x4e, 0x65, 0x77, 0x20, 0x59, 0x6f, 0x72, 0x6b, 0x0, // @1097 "New York"
    0x32, 0x36, 0x2f, 0x30, 0x34, 0x2f, 0x32, 0x30, 0x0, // @1106 "26/04/20"
    0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x0, // @1115 "Weather"
    0x41, 0x4c, 0x53, 0x20, 0x43, 0x48, 0x30, 0x0, // @1123 "ALS CH0"
    0x41, 0x4c, 0x53, 0x20, 0x43, 0x48, 0x31, 0x0, // @1131 "ALS CH1"
    0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x0, // @1139 "Gallery"
    0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x0, // @1147 "Refresh"
    0x2b, 0x2f, 0x2d, 0x20, 0x32, 0x67, 0x0, // @1155 "+/- 2g"
    0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x0, // @1162 "Failed"
    0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x0, // @1169 "Volume"
    0x2b, 0x2f, 0x2d, 0x20, 0x34, 0x67, 0x0, // @1176 "+/- 4g"
    0x2b, 0x2f, 0x2d, 0x20, 0x38, 0x67, 0x0, // @1183 "+/- 8g"
    0x42, 0x75, 0x7a, 0x7a, 0x65, 0x72, 0x0, // @1190 "Buzzer"
    0x4d, 0x6f, 0x6e, 0x64, 0x61, 0x79, 0x0, // @1197 "Monday"
    0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x0, // @1204 "Player"
    0x50, 0x6f, 0x77, 0x65, 0x72, 0x0, // @1211 "Power"
    0x53, 0x70, 0x61, 0x63, 0x65, 0x0, // @1217 "Space"
    0x4d, 0x75, 0x73, 0x69, 0x63, 0x0, // @1223 "Music"
    0x32, 0x30, 0x2e, 0x35, 0x32, 0x0, // @1229 "20.52"
    0x45, 0x72, 0x61, 0x73, 0x65, 0x0, // @1235 "Erase"
    0x45, 0x6e, 0x74, 0x65, 0x72, 0x0, // @1241 "Enter"
    0x44, 0x65, 0x62, 0x75, 0x67, 0x0, // @1247 "Debug"
    0x4c, 0x6f, 0x61, 0x64, 0x0, // @1253 "Load"
    0x54, 0x6f, 0x6e, 0x65, 0x0, // @1258 "Tone"
    0x30, 0x30, 0x30, 0x30, 0x0, // @1263 "0000"
    0x67, 0x61, 0x69, 0x6e, 0x0, // @1268 "gain"
    0x44, 0x65, 0x63, 0x0, // @1273 "Dec"
    0x4f, 0x46, 0x46, 0x0, // @1277 "OFF"
    0x31, 0x30, 0x30, 0x0, // @1281 "100"
    0x31, 0x32, 0x33, 0x0, // @1285 "123"
    0x4f, 0x4e, 0x0, // @1289 "ON"
    0x4f, 0x6b, 0x0, // @1292 "Ok"
    0x51, 0x0 // @1295 "Q"
};
extern uint32_t const indicesGb[];

//array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

//Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] =
{
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}

